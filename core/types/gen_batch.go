// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"

	"github.com/morph-l2/go-ethereum/common"
	"github.com/morph-l2/go-ethereum/common/hexutil"
)

var _ = (*rollupBatchMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r RollupBatch) MarshalJSON() ([]byte, error) {
	type RollupBatch struct {
		Index                    hexutil.Uint64
		Hash                     common.Hash
		Version                  hexutil.Uint
		ParentBatchHeader        hexutil.Bytes
		BlockContexts            hexutil.Bytes  `rlp:"optional"`
		SkippedL1MessageBitmap   hexutil.Bytes  `rlp:"optional"`
		CurrentSequencerSetBytes hexutil.Bytes  `rlp:"optional"`
		PrevStateRoot            common.Hash    `rlp:"optional"`
		PostStateRoot            common.Hash    `rlp:"optional"`
		WithdrawRoot             common.Hash    `rlp:"optional"`
		LastBlockNumber          hexutil.Uint64 `rlp:"optional"`
		NumL1Messages            hexutil.Uint   `rlp:"optional"`
		Sidecar                  *BlobTxSidecar `rlp:"-"`
	}
	var enc RollupBatch
	enc.Index = hexutil.Uint64(r.Index)
	enc.Hash = r.Hash
	enc.Version = hexutil.Uint(r.Version)
	enc.ParentBatchHeader = r.ParentBatchHeader
	enc.BlockContexts = r.BlockContexts
	enc.SkippedL1MessageBitmap = r.SkippedL1MessageBitmap
	enc.CurrentSequencerSetBytes = r.CurrentSequencerSetBytes
	enc.PrevStateRoot = r.PrevStateRoot
	enc.PostStateRoot = r.PostStateRoot
	enc.WithdrawRoot = r.WithdrawRoot
	enc.LastBlockNumber = hexutil.Uint64(r.LastBlockNumber)
	enc.NumL1Messages = hexutil.Uint(r.NumL1Messages)
	enc.Sidecar = r.Sidecar
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *RollupBatch) UnmarshalJSON(input []byte) error {
	type RollupBatch struct {
		Index                    *hexutil.Uint64
		Hash                     *common.Hash
		Version                  *hexutil.Uint
		ParentBatchHeader        *hexutil.Bytes
		BlockContexts            *hexutil.Bytes  `rlp:"optional"`
		SkippedL1MessageBitmap   *hexutil.Bytes  `rlp:"optional"`
		CurrentSequencerSetBytes *hexutil.Bytes  `rlp:"optional"`
		PrevStateRoot            *common.Hash    `rlp:"optional"`
		PostStateRoot            *common.Hash    `rlp:"optional"`
		WithdrawRoot             *common.Hash    `rlp:"optional"`
		LastBlockNumber          *hexutil.Uint64 `rlp:"optional"`
		NumL1Messages            *hexutil.Uint   `rlp:"optional"`
		Sidecar                  *BlobTxSidecar  `rlp:"-"`
	}
	var dec RollupBatch
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Index != nil {
		r.Index = uint64(*dec.Index)
	}
	if dec.Hash != nil {
		r.Hash = *dec.Hash
	}
	if dec.Version != nil {
		r.Version = uint(*dec.Version)
	}
	if dec.ParentBatchHeader != nil {
		r.ParentBatchHeader = *dec.ParentBatchHeader
	}
	if dec.BlockContexts != nil {
		r.BlockContexts = *dec.BlockContexts
	}
	if dec.SkippedL1MessageBitmap != nil {
		r.SkippedL1MessageBitmap = *dec.SkippedL1MessageBitmap
	}
	if dec.CurrentSequencerSetBytes != nil {
		r.CurrentSequencerSetBytes = *dec.CurrentSequencerSetBytes
	}
	if dec.PrevStateRoot != nil {
		r.PrevStateRoot = *dec.PrevStateRoot
	}
	if dec.PostStateRoot != nil {
		r.PostStateRoot = *dec.PostStateRoot
	}
	if dec.WithdrawRoot != nil {
		r.WithdrawRoot = *dec.WithdrawRoot
	}
	if dec.LastBlockNumber != nil {
		r.LastBlockNumber = uint64(*dec.LastBlockNumber)
	}
	if dec.NumL1Messages != nil {
		r.NumL1Messages = uint16(*dec.NumL1Messages)
	}
	if dec.Sidecar != nil {
		r.Sidecar = dec.Sidecar
	}
	return nil
}
