// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"

	"github.com/morph-l2/go-ethereum/common"
	"github.com/morph-l2/go-ethereum/common/hexutil"
)

var _ = (*batchSignatureMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (b BatchSignature) MarshalJSON() ([]byte, error) {
	type BatchSignature struct {
		Signer       common.Address `json:"signer"`
		SignerPubKey hexutil.Bytes  `json:"signerPubKey"`
		Signature    hexutil.Bytes  `json:"signature"`
	}
	var enc BatchSignature
	enc.Signer = b.Signer
	enc.SignerPubKey = b.SignerPubKey
	enc.Signature = b.Signature
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (b *BatchSignature) UnmarshalJSON(input []byte) error {
	type BatchSignature struct {
		Signer       *common.Address `json:"signer"`
		SignerPubKey *hexutil.Bytes  `json:"signerPubKey"`
		Signature    *hexutil.Bytes  `json:"signature"`
	}
	var dec BatchSignature
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Signer != nil {
		b.Signer = *dec.Signer
	}
	if dec.SignerPubKey != nil {
		b.SignerPubKey = *dec.SignerPubKey
	}
	if dec.Signature != nil {
		b.Signature = *dec.Signature
	}
	return nil
}
