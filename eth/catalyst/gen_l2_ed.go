// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package catalyst

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/morph-l2/go-ethereum/common"
	"github.com/morph-l2/go-ethereum/common/hexutil"
	"github.com/morph-l2/go-ethereum/core/types"
)

var _ = (*executableL2DataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (e ExecutableL2Data) MarshalJSON() ([]byte, error) {
	type ExecutableL2Data struct {
		ParentHash         common.Hash                 `json:"parentHash"     gencodec:"required"`
		Miner              common.Address              `json:"miner"          gencodec:"required"`
		Number             hexutil.Uint64              `json:"number"         gencodec:"required"`
		GasLimit           hexutil.Uint64              `json:"gasLimit"       gencodec:"required"`
		BaseFee            *hexutil.Big                `json:"baseFeePerGas"`
		Timestamp          hexutil.Uint64              `json:"timestamp"      gencodec:"required"`
		Transactions       []hexutil.Bytes             `json:"transactions"   gencodec:"required"`
		StateRoot          common.Hash                 `json:"stateRoot"`
		GasUsed            hexutil.Uint64              `json:"gasUsed"`
		ReceiptRoot        common.Hash                 `json:"receiptsRoot"`
		LogsBloom          hexutil.Bytes               `json:"logsBloom"`
		WithdrawTrieRoot   common.Hash                 `json:"withdrawTrieRoot"`
		SkippedTxs         []*types.SkippedTransaction `json:"skippedTxs"`
		NextL1MessageIndex uint64                      `json:"nextL1MessageIndex"`
		Hash               common.Hash                 `json:"hash"`
	}
	var enc ExecutableL2Data
	enc.ParentHash = e.ParentHash
	enc.Miner = e.Miner
	enc.Number = hexutil.Uint64(e.Number)
	enc.GasLimit = hexutil.Uint64(e.GasLimit)
	enc.BaseFee = (*hexutil.Big)(e.BaseFee)
	enc.Timestamp = hexutil.Uint64(e.Timestamp)
	if e.Transactions != nil {
		enc.Transactions = make([]hexutil.Bytes, len(e.Transactions))
		for k, v := range e.Transactions {
			enc.Transactions[k] = v
		}
	}
	enc.StateRoot = e.StateRoot
	enc.GasUsed = hexutil.Uint64(e.GasUsed)
	enc.ReceiptRoot = e.ReceiptRoot
	enc.LogsBloom = e.LogsBloom
	enc.WithdrawTrieRoot = e.WithdrawTrieRoot
	enc.SkippedTxs = e.SkippedTxs
	enc.NextL1MessageIndex = e.NextL1MessageIndex
	enc.Hash = e.Hash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (e *ExecutableL2Data) UnmarshalJSON(input []byte) error {
	type ExecutableL2Data struct {
		ParentHash         *common.Hash                `json:"parentHash"     gencodec:"required"`
		Miner              *common.Address             `json:"miner"          gencodec:"required"`
		Number             *hexutil.Uint64             `json:"number"         gencodec:"required"`
		GasLimit           *hexutil.Uint64             `json:"gasLimit"       gencodec:"required"`
		BaseFee            *hexutil.Big                `json:"baseFeePerGas"`
		Timestamp          *hexutil.Uint64             `json:"timestamp"      gencodec:"required"`
		Transactions       []hexutil.Bytes             `json:"transactions"   gencodec:"required"`
		StateRoot          *common.Hash                `json:"stateRoot"`
		GasUsed            *hexutil.Uint64             `json:"gasUsed"`
		ReceiptRoot        *common.Hash                `json:"receiptsRoot"`
		LogsBloom          *hexutil.Bytes              `json:"logsBloom"`
		WithdrawTrieRoot   *common.Hash                `json:"withdrawTrieRoot"`
		SkippedTxs         []*types.SkippedTransaction `json:"skippedTxs"`
		NextL1MessageIndex *uint64                     `json:"nextL1MessageIndex"`
		Hash               *common.Hash                `json:"hash"`
	}
	var dec ExecutableL2Data
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for ExecutableL2Data")
	}
	e.ParentHash = *dec.ParentHash
	if dec.Miner == nil {
		return errors.New("missing required field 'miner' for ExecutableL2Data")
	}
	e.Miner = *dec.Miner
	if dec.Number == nil {
		return errors.New("missing required field 'number' for ExecutableL2Data")
	}
	e.Number = uint64(*dec.Number)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for ExecutableL2Data")
	}
	e.GasLimit = uint64(*dec.GasLimit)
	if dec.BaseFee != nil {
		e.BaseFee = (*big.Int)(dec.BaseFee)
	}
	if dec.Timestamp == nil {
		return errors.New("missing required field 'timestamp' for ExecutableL2Data")
	}
	e.Timestamp = uint64(*dec.Timestamp)
	if dec.Transactions == nil {
		return errors.New("missing required field 'transactions' for ExecutableL2Data")
	}
	e.Transactions = make([][]byte, len(dec.Transactions))
	for k, v := range dec.Transactions {
		e.Transactions[k] = v
	}
	if dec.StateRoot != nil {
		e.StateRoot = *dec.StateRoot
	}
	if dec.GasUsed != nil {
		e.GasUsed = uint64(*dec.GasUsed)
	}
	if dec.ReceiptRoot != nil {
		e.ReceiptRoot = *dec.ReceiptRoot
	}
	if dec.LogsBloom != nil {
		e.LogsBloom = *dec.LogsBloom
	}
	if dec.WithdrawTrieRoot != nil {
		e.WithdrawTrieRoot = *dec.WithdrawTrieRoot
	}
	if dec.SkippedTxs != nil {
		e.SkippedTxs = dec.SkippedTxs
	}
	if dec.NextL1MessageIndex != nil {
		e.NextL1MessageIndex = *dec.NextL1MessageIndex
	}
	if dec.Hash != nil {
		e.Hash = *dec.Hash
	}
	return nil
}
