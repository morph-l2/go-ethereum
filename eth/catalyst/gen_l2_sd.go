// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package catalyst

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/morph-l2/go-ethereum/common"
	"github.com/morph-l2/go-ethereum/common/hexutil"
)

var _ = (*safeL2DataMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (s SafeL2Data) MarshalJSON() ([]byte, error) {
	type SafeL2Data struct {
		Number       hexutil.Uint64  `json:"number"         gencodec:"required"`
		GasLimit     hexutil.Uint64  `json:"gasLimit"       gencodec:"required"`
		BaseFee      *hexutil.Big    `json:"baseFeePerGas"`
		Timestamp    hexutil.Uint64  `json:"timestamp"      gencodec:"required"`
		Transactions []hexutil.Bytes `json:"transactions"   gencodec:"required"`
		BatchHash    *common.Hash    `json:"batchHash"`
	}
	var enc SafeL2Data
	enc.Number = hexutil.Uint64(s.Number)
	enc.GasLimit = hexutil.Uint64(s.GasLimit)
	enc.BaseFee = (*hexutil.Big)(s.BaseFee)
	enc.Timestamp = hexutil.Uint64(s.Timestamp)
	if s.Transactions != nil {
		enc.Transactions = make([]hexutil.Bytes, len(s.Transactions))
		for k, v := range s.Transactions {
			enc.Transactions[k] = v
		}
	}
	enc.BatchHash = s.BatchHash
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (s *SafeL2Data) UnmarshalJSON(input []byte) error {
	type SafeL2Data struct {
		Number       *hexutil.Uint64 `json:"number"         gencodec:"required"`
		GasLimit     *hexutil.Uint64 `json:"gasLimit"       gencodec:"required"`
		BaseFee      *hexutil.Big    `json:"baseFeePerGas"`
		Timestamp    *hexutil.Uint64 `json:"timestamp"      gencodec:"required"`
		Transactions []hexutil.Bytes `json:"transactions"   gencodec:"required"`
		BatchHash    *common.Hash    `json:"batchHash"`
	}
	var dec SafeL2Data
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Number == nil {
		return errors.New("missing required field 'number' for SafeL2Data")
	}
	s.Number = uint64(*dec.Number)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for SafeL2Data")
	}
	s.GasLimit = uint64(*dec.GasLimit)
	if dec.BaseFee != nil {
		s.BaseFee = (*big.Int)(dec.BaseFee)
	}
	if dec.Timestamp == nil {
		return errors.New("missing required field 'timestamp' for SafeL2Data")
	}
	s.Timestamp = uint64(*dec.Timestamp)
	if dec.Transactions == nil {
		return errors.New("missing required field 'transactions' for SafeL2Data")
	}
	s.Transactions = make([][]byte, len(dec.Transactions))
	for k, v := range dec.Transactions {
		s.Transactions[k] = v
	}
	if dec.BatchHash != nil {
		s.BatchHash = dec.BatchHash
	}
	return nil
}
