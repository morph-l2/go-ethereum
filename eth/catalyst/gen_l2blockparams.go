// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package catalyst

import (
	"encoding/json"
	"errors"

	"github.com/morph-l2/go-ethereum/common/hexutil"
)

var _ = (*assembleL2BlockParamsMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (a AssembleL2BlockParams) MarshalJSON() ([]byte, error) {
	type AssembleL2BlockParams struct {
		Number       hexutil.Uint64  `json:"number"        gencodec:"required"`
		Transactions []hexutil.Bytes `json:"transactions"`
	}
	var enc AssembleL2BlockParams
	enc.Number = hexutil.Uint64(a.Number)
	if a.Transactions != nil {
		enc.Transactions = make([]hexutil.Bytes, len(a.Transactions))
		for k, v := range a.Transactions {
			enc.Transactions[k] = v
		}
	}
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (a *AssembleL2BlockParams) UnmarshalJSON(input []byte) error {
	type AssembleL2BlockParams struct {
		Number       *hexutil.Uint64 `json:"number"        gencodec:"required"`
		Transactions []hexutil.Bytes `json:"transactions"`
	}
	var dec AssembleL2BlockParams
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Number == nil {
		return errors.New("missing required field 'number' for AssembleL2BlockParams")
	}
	a.Number = uint64(*dec.Number)
	if dec.Transactions != nil {
		a.Transactions = make([][]byte, len(dec.Transactions))
		for k, v := range dec.Transactions {
			a.Transactions[k] = v
		}
	}
	return nil
}
